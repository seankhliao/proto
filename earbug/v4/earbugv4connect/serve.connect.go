// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: earbug/v4/serve.proto

package earbugv4connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v4 "go.seankhliao.com/proto/earbug/v4"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// EarbugServiceName is the fully-qualified name of the EarbugService service.
	EarbugServiceName = "seankhliao.earbug.v4.EarbugService"
)

// EarbugServiceClient is a client for the seankhliao.earbug.v4.EarbugService service.
type EarbugServiceClient interface {
	UpdateRecentlyPlayed(context.Context, *connect_go.Request[v4.UpdateRecentlyPlayedRequest]) (*connect_go.Response[v4.UpdateRecentlyPlayedResponse], error)
	Authorize(context.Context, *connect_go.Request[v4.AuthorizeRequest]) (*connect_go.Response[v4.AuthorizeResponse], error)
	Export(context.Context, *connect_go.Request[v4.ExportRequest]) (*connect_go.Response[v4.ExportResponse], error)
	ReportPlayed(context.Context, *connect_go.Request[v4.ReportPlayedRequest]) (*connect_go.Response[v4.ReportPlayedResponse], error)
}

// NewEarbugServiceClient constructs a client for the seankhliao.earbug.v4.EarbugService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEarbugServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) EarbugServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &earbugServiceClient{
		updateRecentlyPlayed: connect_go.NewClient[v4.UpdateRecentlyPlayedRequest, v4.UpdateRecentlyPlayedResponse](
			httpClient,
			baseURL+"/seankhliao.earbug.v4.EarbugService/UpdateRecentlyPlayed",
			opts...,
		),
		authorize: connect_go.NewClient[v4.AuthorizeRequest, v4.AuthorizeResponse](
			httpClient,
			baseURL+"/seankhliao.earbug.v4.EarbugService/Authorize",
			opts...,
		),
		export: connect_go.NewClient[v4.ExportRequest, v4.ExportResponse](
			httpClient,
			baseURL+"/seankhliao.earbug.v4.EarbugService/Export",
			opts...,
		),
		reportPlayed: connect_go.NewClient[v4.ReportPlayedRequest, v4.ReportPlayedResponse](
			httpClient,
			baseURL+"/seankhliao.earbug.v4.EarbugService/ReportPlayed",
			opts...,
		),
	}
}

// earbugServiceClient implements EarbugServiceClient.
type earbugServiceClient struct {
	updateRecentlyPlayed *connect_go.Client[v4.UpdateRecentlyPlayedRequest, v4.UpdateRecentlyPlayedResponse]
	authorize            *connect_go.Client[v4.AuthorizeRequest, v4.AuthorizeResponse]
	export               *connect_go.Client[v4.ExportRequest, v4.ExportResponse]
	reportPlayed         *connect_go.Client[v4.ReportPlayedRequest, v4.ReportPlayedResponse]
}

// UpdateRecentlyPlayed calls seankhliao.earbug.v4.EarbugService.UpdateRecentlyPlayed.
func (c *earbugServiceClient) UpdateRecentlyPlayed(ctx context.Context, req *connect_go.Request[v4.UpdateRecentlyPlayedRequest]) (*connect_go.Response[v4.UpdateRecentlyPlayedResponse], error) {
	return c.updateRecentlyPlayed.CallUnary(ctx, req)
}

// Authorize calls seankhliao.earbug.v4.EarbugService.Authorize.
func (c *earbugServiceClient) Authorize(ctx context.Context, req *connect_go.Request[v4.AuthorizeRequest]) (*connect_go.Response[v4.AuthorizeResponse], error) {
	return c.authorize.CallUnary(ctx, req)
}

// Export calls seankhliao.earbug.v4.EarbugService.Export.
func (c *earbugServiceClient) Export(ctx context.Context, req *connect_go.Request[v4.ExportRequest]) (*connect_go.Response[v4.ExportResponse], error) {
	return c.export.CallUnary(ctx, req)
}

// ReportPlayed calls seankhliao.earbug.v4.EarbugService.ReportPlayed.
func (c *earbugServiceClient) ReportPlayed(ctx context.Context, req *connect_go.Request[v4.ReportPlayedRequest]) (*connect_go.Response[v4.ReportPlayedResponse], error) {
	return c.reportPlayed.CallUnary(ctx, req)
}

// EarbugServiceHandler is an implementation of the seankhliao.earbug.v4.EarbugService service.
type EarbugServiceHandler interface {
	UpdateRecentlyPlayed(context.Context, *connect_go.Request[v4.UpdateRecentlyPlayedRequest]) (*connect_go.Response[v4.UpdateRecentlyPlayedResponse], error)
	Authorize(context.Context, *connect_go.Request[v4.AuthorizeRequest]) (*connect_go.Response[v4.AuthorizeResponse], error)
	Export(context.Context, *connect_go.Request[v4.ExportRequest]) (*connect_go.Response[v4.ExportResponse], error)
	ReportPlayed(context.Context, *connect_go.Request[v4.ReportPlayedRequest]) (*connect_go.Response[v4.ReportPlayedResponse], error)
}

// NewEarbugServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEarbugServiceHandler(svc EarbugServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/seankhliao.earbug.v4.EarbugService/UpdateRecentlyPlayed", connect_go.NewUnaryHandler(
		"/seankhliao.earbug.v4.EarbugService/UpdateRecentlyPlayed",
		svc.UpdateRecentlyPlayed,
		opts...,
	))
	mux.Handle("/seankhliao.earbug.v4.EarbugService/Authorize", connect_go.NewUnaryHandler(
		"/seankhliao.earbug.v4.EarbugService/Authorize",
		svc.Authorize,
		opts...,
	))
	mux.Handle("/seankhliao.earbug.v4.EarbugService/Export", connect_go.NewUnaryHandler(
		"/seankhliao.earbug.v4.EarbugService/Export",
		svc.Export,
		opts...,
	))
	mux.Handle("/seankhliao.earbug.v4.EarbugService/ReportPlayed", connect_go.NewUnaryHandler(
		"/seankhliao.earbug.v4.EarbugService/ReportPlayed",
		svc.ReportPlayed,
		opts...,
	))
	return "/seankhliao.earbug.v4.EarbugService/", mux
}

// UnimplementedEarbugServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEarbugServiceHandler struct{}

func (UnimplementedEarbugServiceHandler) UpdateRecentlyPlayed(context.Context, *connect_go.Request[v4.UpdateRecentlyPlayedRequest]) (*connect_go.Response[v4.UpdateRecentlyPlayedResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("seankhliao.earbug.v4.EarbugService.UpdateRecentlyPlayed is not implemented"))
}

func (UnimplementedEarbugServiceHandler) Authorize(context.Context, *connect_go.Request[v4.AuthorizeRequest]) (*connect_go.Response[v4.AuthorizeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("seankhliao.earbug.v4.EarbugService.Authorize is not implemented"))
}

func (UnimplementedEarbugServiceHandler) Export(context.Context, *connect_go.Request[v4.ExportRequest]) (*connect_go.Response[v4.ExportResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("seankhliao.earbug.v4.EarbugService.Export is not implemented"))
}

func (UnimplementedEarbugServiceHandler) ReportPlayed(context.Context, *connect_go.Request[v4.ReportPlayedRequest]) (*connect_go.Response[v4.ReportPlayedResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("seankhliao.earbug.v4.EarbugService.ReportPlayed is not implemented"))
}
